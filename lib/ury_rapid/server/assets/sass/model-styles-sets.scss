// Model set styles.

@import 'colour-palette';
@import 'icons';
@import 'model-styles-common';

// Channels
// Make channels line up horizontally.
.channel_set {
  >div.set_contents {
    align-items: stretch;
    border-collapse: separate;
    border-spacing: $size-padding;
    display: flex;
    flex: 1;
    margin: 0 auto;

    >section {
      display: flex;
      flex: 1;
      flex-direction: column;
    }
  }
}

// Sets and set-like constructs
$s-global:   (member: "model",    colour: $colour-main,        fa: $fa-home);
$s-group:    (member: "sub_root", colour: $colour-purple,      fa: $fa-sitemap);
$s-player:   (member: "player",   colour: $colour-amber,       fa: $fa-play);
$s-playlist: (member: "playlist", colour: $colour-deep-orange, fa: $fa-list-ol);
$s-info:     (member: "info",     colour: $colour-indigo,      fa: $fa-info);
@each $s in $s-global, $s-group, $s-player, $s-playlist, $s-info {
  section.#{map-get($s, member)} {
    @include fa-heading(map-get($s, fa));
    @include set-style(map-get($s, colour));
  }
}

// Generic sets and constants
.set {
  @include fa-heading($fa-folder-open);
  @include set-style($colour-grey);
}

section.constant {
  @include set-member-style($colour-grey);

  // Remove lower margin on the value.
  p {
    margin: 0;
  }
}

li.item,
p.item {
  // Stop line-breaking and force an ellipsis instead.
  overflow: hidden;
  padding: $size-padding-thin;
  padding-right: ($size-padding-thin + $size-in-out);
  position: relative;
  text-overflow: ellipsis;
  white-space: nowrap;
}

p.item {
  margin: $size-padding-thin;
}

ol.playlist-items {
  // Prevent duplicate borders.
  li {
    &:not(:first-child) {
      border-top: 0;
    }
  }
}

