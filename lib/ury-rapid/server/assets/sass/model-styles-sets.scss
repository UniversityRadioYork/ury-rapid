// Model set styles.

@import 'colour-palette';
@import 'icons';
@import 'model-styles-common';

// Generic sets and constants
.set {
  @include set-style($colour-grey);
}
.constant {
  @include set-member-style($colour-grey);

  // Remove lower margin on the value.
  p {
    margin: 0;
  }
}

// Specific sets and their members
$s-player:   (set: "player_set",   member: "player",   colour: $colour-amber,       fa: $fa-play);
$s-playlist: (set: "playlist_set", member: "playlist", colour: $colour-deep-orange, fa: $fa-list-ol);
@each $s in $s-player, $s-playlist {
  section.#{map-get($s, set)} {
    @include set-style(map-get($s, colour));
  }

  section.#{map-get($s, set)} section.#{map-get($s, member)},
  body>section.#{map-get($s, member)} {
    @include fa-heading(map-get($s, fa));
    @include set-member-style(map-get($s, colour));
  }
}

// Info (TODO: find a way of making info constants work)
section.info {
  @include fa-heading($fa-info);
  @include set-style($colour-indigo);
}

// Make players and playlists line up horizontally.
.player_set,
.playlist_set {
  >div.set_contents {
    align-items: stretch;
    border-collapse: separate;
    border-spacing: $size-padding;
    display: flex;
    flex: 1;
    margin: 0 auto;

    >section {
      display: flex;
      flex: 1;
      flex-direction: column;
    }
  }
}

li.item,
p.item {
  // Stop line-breaking and force an ellipsis instead.
  overflow: hidden;
  padding: $size-padding-thin;
  padding-right: ($size-padding-thin + $size-in-out);
  position: relative;
  text-overflow: ellipsis;
  white-space: nowrap;
}

p.item {
  margin: $size-padding-thin;
}

ol.playlist-items {
  // Prevent duplicate borders.
  li {
    &:not(:first-child) {
      border-top: 0;
    }
  }
}

