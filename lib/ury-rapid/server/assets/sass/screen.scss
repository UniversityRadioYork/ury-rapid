@import 'compass/reset';
@import 'compass/utilities/general/clearfix';
@import 'compass/typography/links/link-colors';
@import 'compass/css3';

@import 'colour-palette';
@import 'fonts';
@import 'icons';

$size-border: .12rem;
$size-padding: .9rem;
$size-padding-thin: .4rem;
$size-in-out: $size-padding * (3/4);

// Semantic colour names
$colour-outer-fg:           #000;
$colour-outer-bg:           map-get($colour-purple, 50);
$colour-header-fg:          map-get($colour-purple, 50);
$colour-header-bg:          map-get($colour-purple, 700);
$colour-toolbar-fg:         map-get($colour-purple, 50);
$colour-toolbar-bg:         map-get($colour-purple, 500);

$colour-root-playout-fg: map-get($colour-pink, 50);
$colour-root-playout-bg: map-get($colour-pink, 500);

$colour-console-bg: map-get($colour-blue-grey, 700);
$colour-console-fg: map-get($colour-blue-grey, 50);

@mixin border {
  padding: $size-padding;
}

@mixin dark-text {
  color: rgba(0, 0, 0, .87);
}

a {
  @include link-colors(
    map-get($colour-light-blue, 500),
    map-get($colour-red, 500),
    map-get($colour-red, 500),
    map-get($colour-deep-purple, 500)
  );
}

html {
  @include font-normal;

  background-color: $colour-outer-bg;
  color: $colour-outer-fg;
  font-size: 16pt;
  text-align: center;

  strong {
    font-weight: bold;
  }
}

body {
  >section,
  >nav {
    display: table;
    font-size: 1rem !important;
    margin: $size-padding auto !important;
    max-width: 80%;
    text-align: left;
  }

  >header {
    background-color: $colour-header-bg;
    color: $colour-header-fg;
    text-align: left;

    >h1 {
      display: inline-block;
      font-size: 3rem;
      line-height: .8em;
      margin: 0;
      padding: $size-padding-thin;
    }

    >h2 {
      display: inline;
      font-size: 1.2rem;
      margin: 0;
    }
  }
}

h1,
h2,
h3 {
  @include font-title;

  font-size: 1.2em;
  margin-bottom: $size-padding;
  text-align: left;
}

section,
nav {
  @include border;

  font-size: .9em;
  position: relative;

  >h1 {
    // Transfer the margin into padding, so we can style the entire heading
    // bar without a nasty padding border around it.

    margin-left: -($size-padding);
    margin-right: -($size-padding);
    margin-top: -($size-padding);
    padding-bottom: $size-padding-thin;
    padding-left: $size-padding-thin;
    padding-right: $size-padding-thin;
    padding-top: $size-padding-thin;
  }
}

p:not(:last-child) {
  margin-bottom: $size-padding;
}

nav h1 {
  display: none;
}

// Make players and playlists line up horizontally.
.player_set,
.playlist_set {
  >div.set_contents {
    align-items: stretch;
    border-collapse: separate;
    border-spacing: $size-padding;
    display: flex;
    flex: 1;
    margin: 0 auto;

    >section {
      display: flex;
      flex: 1;
      flex-direction: column;
    }
  }
}

section.constant {
  // Remove lower margin on the value.
  p {
    margin: 0;
  }
}

// Nested variables have some special formatting.
div>section,
section>section {
  &.variable,
  &.constant {
    display: flex !important;

    h1 {
      @include font-normal;

      border-bottom: none !important;
      display: inline;
      font-size: 1em;
      font-weight: bold;
      margin: 4pt;
      margin-right: $size-padding-thin;
      padding: 0 !important;
    }

    p {
      display: inline;
      flex: 1;
      margin: 4pt;
      overflow: hidden;
      text-align: right;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  }
}

.item {
  @include border;
}

li.item,
p.item {
  // Stop line-breaking and force an ellipsis instead.
  overflow: hidden;
  padding: $size-padding-thin;
  padding-right: ($size-padding-thin + $size-in-out);
  position: relative;
  text-overflow: ellipsis;
  white-space: nowrap;
}

p.item {
  margin: $size-padding-thin;
}

ol.playlist-items {
  // Prevent duplicate borders.
  li {
    &:not(:first-child) {
      border-top: 0;
    }
  }
}

nav.main-menu {
  border: 0;
  text-align: center;

  li {
    @include border;

    display: inline-block;
    padding: $size-padding;
  }
}

nav.resources {
  clear: both;
}

.in,
.out,
.json {
  display: block;
  font-size: $size-in-out;
  height: $size-in-out;
  line-height: $size-in-out;
  padding: $size-border;
  position: absolute;
  text-align: center;
  width: $size-in-out;
}

.in {
  bottom: 0;
  padding-bottom: 0;
  padding-right: 0;
  right: 0;
}

.out {
  left: 0;
  padding-left: 0;
  padding-top: 0;
  top: 0;
}

.json {
  padding-right: 0;
  padding-top: 0;
  right: 0;
  top: 0;
}

.legend {
  h1 {
    display: none;
  }

  >section {
    border: 0;
    padding: 0;
    text-align: center;

    &:last-child {
      margin-bottom: $size-padding;
    }
  }

  p,
  span {
    @include border;

    display: inline-block;
    position: relative;
  }

  p {
    margin: $size-padding;
    margin-bottom: 0;
    padding: $size-padding;
  }

  span {
    padding: $size-padding-thin;
  }
}

// Console themeing.
pre.json_code,
#update-console {
  @include border;
  @include font-console;

  background-color: $colour-console-bg;
  color: $colour-console-fg;
  margin-bottom: $size-padding;
  padding: $size-padding;
}

dt {
  font-weight: bold;
}

dd {
  margin-left: $size-padding;
}

// Toolbar
#toolbar {
  align-items: center;
  background-color: $colour-toolbar-bg;
  color: $colour-toolbar-fg;
  display: flex;
  padding: 0;

  h1,
  .toolbar-button {
    @include font-title;

    font-size: 1.1rem;
    margin: 0;
    padding-left: $size-padding-thin;
    vertical-align: middle;
  }

  h1 {
    display: inline;
    flex: 3;
    text-align: left;
  }

  label {
    flex: 2;
    margin-right: $size-padding-thin;
    text-align: right;
  }

  #toolbar-data {
    flex: 6;
    margin-right: $size-padding-thin;
  }

  .toolbar-button {
    cursor: pointer;
    flex: 1;
    padding: $size-padding-thin;
    text-align: center;

    &:not(:first-child) {
      margin-right: $size-padding-thin;
    }
  }
}

@import 'model-styles-common';

// JSON inspector

section.json_inspector {
  @include fa-heading($fa-code);
  @include set-style($colour-blue-grey);
}

// Roots

section.playout_root {
  @include fa-heading($fa-volume-up);
  @include set-style($colour-pink);
}

section.group_root {
  @include fa-heading($fa-sitemap);
  @include set-style($colour-purple);
}

// Info (TODO: find a way of making info constants work)

section.info {
  @include fa-heading($fa-info);
  @include set-style($colour-indigo);
}

// Generic set/constant

.set {
  @include fa-heading($fa-folder-open);
  @include set-style($colour-grey);
}

.constant {
  @include set-member-style($colour-grey);
}

// Player set

section.player_set {
  @include set-style($colour-amber);
}

section.player_set section.player,
body>section.player {
  @include fa-heading($fa-play);
  @include set-member-style($colour-amber);

  .constant {
    @include set-member-style($colour-amber);
  }
}

// Playlist set

section.playlist_set {
  @include set-style($colour-deep-orange);
}

section.playlist_set section.playlist,
body>section.playlist {
  @include fa-heading($fa-list-ol);
  @include set-member-style($colour-orange);
}

// Play states
$p-playing: (name: "playing", colour: $colour-green,  fa: $fa-play);
$p-paused:  (name: "paused",  colour: $colour-yellow, fa: $fa-pause);
$p-stopped: (name: "stopped", colour: $colour-red,    fa: $fa-stop);
@each $p in $p-playing, $p-paused, $p-stopped {
  section.player section.constant.#{map-get($p, name)},
  body>section.constant.#{map-get($p, name)} {
    @include set-member-style(map-get($p, colour));
    @include fa-paragraph(map-get($p, fa));
  }
}

// Load states
$l-ok:      (name: "ok",      colour: $colour-light-green, fa: $fa-check);
$l-loading: (name: "loading", colour: $colour-light-blue,  fa: $fa-ellipsis-h);
$l-failed:  (name: "failed",  colour: $colour-deep-purple, fa: $fa-times);
$l-empty:   (name: "empty",   colour: $colour-brown,       fa: $fa-square-o);
@each $l in $l-ok, $l-loading, $l-failed, $l-empty {
  section.player section.constant.#{map-get($l, name)},
  body>section.constant.#{map-get($l, name)} {
    @include set-member-style(map-get($l, colour));
    @include fa-paragraph(map-get($l, fa));
  }
}

// Item types
$i-file:    (name: "file",    colour: $colour-cyan, fa: $fa-file-audio-o);
$i-text:    (name: "text",    colour: $colour-lime, fa: $fa-file-text-o);
$i-library: (name: "library", colour: $colour-teal, fa: $fa-music);
@each $i in $i-file, $i-text, $i-library {
  section.player section.item.#{map-get($i, name)},
  body>section.item.#{map-get($i, name)} {
    @include set-member-style(map-get($i, colour));
    @include fa-heading(map-get($i, fa));
  }

  section.playlist li.item.#{map-get($i, name)} {
    @include set-member-style(map-get($i, colour));
    @include fa-before(map-get($i, fa));
  }
}
